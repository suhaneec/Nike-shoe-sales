# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w0OM1mODrF1YEC1teLkuTLu2x7XD0dH0
"""

import streamlit as st
import pandas as pd
import plotly.express as px

def main():
    # Page Configuration
    st.set_page_config(page_title="Nike Shoes Sales Dashboard", page_icon=":athletic_shoe:", layout="wide")

    # Load Data
    df = pd.read_csv("/content/nike_shoes_sales_cleaned.csv")

    # Clean Column Names
    df.columns = df.columns.str.strip()

    # App Header
    st.image("/content/nike logo.jpg", width=250)
    st.title(":athletic_shoe: Nike Shoes Sales Dashboard")
    st.markdown("Explore Nike shoe data, including pricing, discounts, reviews, and ratings.")

    # Sidebar Filters
    st.sidebar.header("Filter Options")
    price_range = st.sidebar.slider(
        "Select Sale Price Range",
        min_value=float(df['sale_price'].min()),
        max_value=float(df['sale_price'].max()),
        value=(float(df['sale_price'].min()), float(df['sale_price'].max()))
    )
    rating_filter = st.sidebar.slider(
        "Select Rating Range",
        min_value=float(df['rating'].min()),
        max_value=float(df['rating'].max()),
        value=(float(df['rating'].min()), float(df['rating'].max()))
    )

    # Filter Data
    filtered_df = df[
        (df['sale_price'] >= price_range[0]) &
        (df['sale_price'] <= price_range[1]) &
        (df['rating'] >= rating_filter[0]) &
        (df['rating'] <= rating_filter[1])
    ]

    # Key Metrics
    st.markdown("---")
    st.subheader("📊 Sales Overview")

    col1, col2 = st.columns(2)
    average_sale_price = filtered_df['sale_price'].mean()
    average_discount = filtered_df['discount'].mean()
    col1.metric("Average Sale Price", f"${average_sale_price:.2f}")
    col2.metric("Average Discount", f"{average_discount:.2f}%")

    # Top 5 Products by Discount
    st.markdown("---")
    st.subheader("🏷️ Top 5 Products by Discount")
    top_discounts = filtered_df.sort_values(by="discount", ascending=False).head(5)
    st.dataframe(top_discounts[['product_name', 'sale_price', 'discount', 'rating']])

    # Distribution of Sale Prices
    st.markdown("---")
    st.subheader("💡 Distribution of Sale Prices")
    fig1 = px.histogram(filtered_df, x="sale_price", nbins=30, title="Sale Price Distribution", color_discrete_sequence=["blue"])
    fig1.update_layout(xaxis_title="Sale Price ($)", yaxis_title="Frequency")
    st.plotly_chart(fig1)

    # Average Rating by Brand
    st.markdown("---")
    st.subheader("🌟 Average Rating by Brand")
    brand_ratings = filtered_df.groupby("brand")["rating"].mean().sort_values(ascending=False).reset_index()
    fig2 = px.bar(
        brand_ratings,
        x="rating",
        y="brand",
        orientation="h",
        title="Average Rating by Brand",
        color="rating",
        color_continuous_scale="Blues",
    )
    fig2.update_layout(xaxis_title="Average Rating", yaxis_title="Brand")
    st.plotly_chart(fig2)

    # Display Filtered Data Table
    st.markdown("---")
    st.subheader("📄 Filtered Data")
    st.dataframe(filtered_df)

    # Footer Section
    st.markdown("---")
    st.markdown(
        """
        ### About this Dashboard
        This dashboard is designed to analyze and visualize Nike shoe sales data, focusing on pricing, discounts, and ratings.
        - **Built with**: Python, Streamlit, and Plotly.
        - **Deployed on**: Streamlit Cloud.

        [Visit GitHub Repository](https://github.com/<your-username>/nike-shoes-sales) for the codebase.
        """
    )

if __name__ == "__main__":
    main()